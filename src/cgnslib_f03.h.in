#ifndef CGNSLIB_F03_H
#define CGNSLIB_F03_H

#include "cgnstypes_f.h"

! Fortran version of cgnslib.h
!        integer CG_BUILD_64BIT
!        parameter (CG_BUILD_64BIT = @BUILD64BIT@)
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      modes for cgns file                                            *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
#ifdef HAVE_F2003_REQUIREMENTS
	INTEGER(C_INT), PARAMETER :: CG_MODE_READ   = 0
	INTEGER(C_INT), PARAMETER :: CG_MODE_WRITE  = 1
	INTEGER(C_INT), PARAMETER :: CG_MODE_MODIFY = 2
#else
        integer@CGFSIZET@ CG_MODE_READ, CG_MODE_WRITE, CG_MODE_MODIFY
        parameter (CG_MODE_READ   = 0)
        parameter (CG_MODE_WRITE  = 1)
        parameter (CG_MODE_MODIFY = 2)
#endif
!* legacy code support
        integer@CGFSIZET@ MODE_READ, MODE_WRITE, MODE_MODIFY
        parameter (MODE_READ   = 0)
        parameter (MODE_WRITE  = 1)
        parameter (MODE_MODIFY = 2)

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      file types (found in cgnslib.h)                                *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
#if HAVE_FORTRAN_2003
	INTEGER(C_INT), PARAMETER :: CG_FILE_NONE = 0
	INTEGER(C_INT), PARAMETER :: CG_FILE_ADF  = 1
	INTEGER(C_INT), PARAMETER :: CG_FILE_HDF5 = 2
	INTEGER(C_INT), PARAMETER :: CG_FILE_ADF2 = 3
#else
        integer@CGFSIZET@ CG_FILE_NONE, CG_FILE_ADF, CG_FILE_HDF5
        integer@CGFSIZET@ CG_FILE_ADF2
        parameter (CG_FILE_NONE = 0)
        parameter (CG_FILE_ADF  = 1)
        parameter (CG_FILE_HDF5 = 2)
        parameter (CG_FILE_ADF2 = 3)
#endif

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      some error code (found in cgnslib.h)                           *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
#if HAVE_FORTRAN_2003
	INTEGER(C_INT), PARAMETER :: CG_OK              = 0
	INTEGER(C_INT), PARAMETER :: CG_ERROR           = 1
	INTEGER(C_INT), PARAMETER :: CG_NODE_NOT_FOUND  = 2
	INTEGER(C_INT), PARAMETER :: CG_INCORRECT_PATH  = 3
	INTEGER(C_INT), PARAMETER :: CG_CG_NO_INDEX_DIM = 4
#else
        integer@CGFSIZET@ CG_OK, CG_ERROR, CG_NODE_NOT_FOUND
        integer@CGFSIZET@ CG_INCORRECT_PATH, CG_NO_INDEX_DIM
        parameter (CG_OK             = 0)
        parameter (CG_ERROR          = 1)
        parameter (CG_NODE_NOT_FOUND = 2)
        parameter (CG_INCORRECT_PATH = 3)
        parameter (CG_NO_INDEX_DIM   = 4)
#endif
!* legacy code support
        integer@CGFSIZET@ ALL_OK, ERROR, NODE_NOT_FOUND, INCORRECT_PATH
        parameter (ALL_OK         = 0)
        parameter (ERROR          = 1)
        parameter (NODE_NOT_FOUND = 2)
        parameter (INCORRECT_PATH = 3)

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Parallel CGNS parameters                                       *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
#if HAVE_FORTRAN_2003
        INTEGER(C_INT), PARAMETER :: CGP_INDEPENDENT = 0
	INTEGER(C_INT), PARAMETER :: CGP_COLLECTIVE  = 1	
#else
        integer@CGFSIZET@ CGP_INDEPENDENT, CGP_COLLECTIVE
        parameter (CGP_INDEPENDENT = 0)
        parameter (CGP_COLLECTIVE  = 1)
#endif

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Dimensional Units (found in cgnslib.h)                         *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
#if HAVE_FORTRAN_2003
	INTEGER(C_INT), PARAMETER :: CG_Null = 0
	INTEGER(C_INT), PARAMETER :: CG_UserDefined = 1	
#else
        integer@CGFSIZET@ CG_UserDefined, CG_Null
        parameter (CG_Null = 0)
        parameter (CG_UserDefined = 1)
#endif
!* legacy code support
        integer@CGFSIZET@ Null, UserDefined
        parameter (Null = 0)
        parameter (UserDefined = 1)

        CHARACTER*32 MassUnitsName(0:5)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
	   ENUMERATOR :: MassUnitsNull = CG_Null
  	   ENUMERATOR :: MassUnitsUserDefined = CG_UserDefined
  	   ENUMERATOR :: Kilogram = 2
           ENUMERATOR :: Gram = 3
           ENUMERATOR :: Slug = 4
           ENUMERATOR :: PoundMass = 5
        END ENUM
#else
        integer@CGFSIZET@ Kilogram, Gram, Slug, PoundMass
        parameter (Kilogram  = 2)
        parameter (Gram      = 3)
        parameter (Slug      = 4)
        parameter (PoundMass = 5)
#endif
        CHARACTER*32 LengthUnitsName(0:6)
#if HAVE_FORTRAN_2003
	ENUM, BIND(C)
  	   ENUMERATOR :: LengthUnitsNull         = CG_Null
           ENUMERATOR :: LengthUnitsUserDefined  = CG_UserDefined
           ENUMERATOR :: Meter                   = 2
           ENUMERATOR :: Centimeter		 = 3
      	   ENUMERATOR :: Millimeter		 = 4
  	   ENUMERATOR :: Foot			 = 5
  	   ENUMERATOR :: Inch			 = 6
	END ENUM
#else
        integer@CGFSIZET@ Meter, Centimeter, Millimeter
        integer@CGFSIZET@ Foot, Inch
        parameter (Meter      = 2)
        parameter (Centimeter = 3)
        parameter (Millimeter = 4)
        parameter (Foot       = 5)
        parameter (Inch       = 6)
#endif

        CHARACTER*32 TimeUnitsName(0:2)
#if HAVE_FORTRAN_2003
	ENUM, BIND(C)
  	   ENUMERATOR :: TimeUnitsNull		= CG_Null
  	   ENUMERATOR :: TimeUnitsUserDefined	= CG_UserDefined
  	   ENUMERATOR :: Second			= 2
	END ENUM
#else
        integer@CGFSIZET@ Second
        parameter (Second = 2)
#endif
        CHARACTER*32 TemperatureUnitsName(0:5)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
  	   ENUMERATOR :: TemperatureUnitsNull		= CG_Null
  	   ENUMERATOR :: TemperatureUnitsUserDefined	= CG_UserDefined
  	   ENUMERATOR :: Kelvin				= 2
  	   ENUMERATOR :: Celsius			= 3
  	   ENUMERATOR :: Rankine			= 4
  	   ENUMERATOR :: Fahrenheit			= 5
	END ENUM
#else
        integer@CGFSIZET@ Kelvin, Celsius, Rankine, Fahrenheit
        parameter (Kelvin     = 2)
        parameter (Celsius    = 3)
        parameter (Rankine    = 4)
        parameter (Fahrenheit = 5)
#endif

        CHARACTER*32 AngleUnitsName(0:3)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
  	   ENUMERATOR :: AngleUnitsNull 	= CG_Null
  	   ENUMERATOR :: AngleUnitsUserDefined	= CG_UserDefined
  	   ENUMERATOR :: Degree			= 2
  	   ENUMERATOR :: Radian			= 3
	END ENUM
#else
        integer@CGFSIZET@ Degree, Radian
        parameter (Degree = 2)
        parameter (Radian = 3)
#endif

        CHARACTER*32 ElectricCurrentUnitsName(0:6)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
	  ENUMERATOR :: ElectricCurrentUnitsNull 	= CG_Null
  	  ENUMERATOR :: ElectricCurrentUnitsUserDefined = CG_UserDefined
  	  ENUMERATOR :: Ampere				= 2
  	  ENUMERATOR :: Abampere	 		= 3
  	  ENUMERATOR :: Statampere			= 4
  	  ENUMERATOR :: Edison				= 5
  	  ENUMERATOR :: auCurrent			= 6
	END ENUM
#else
        integer@CGFSIZET@ Ampere,Abampere,Statampere,Edison,auCurrent
        parameter (Ampere     = 2)
        parameter (Abampere   = 3)
        parameter (Statampere = 4)
        parameter (Edison     = 5)
        parameter (auCurrent  = 6)
#endif
        CHARACTER*32 SubstanceAmountUnitsName(0:5)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
  	   ENUMERATOR :: SubstanceAmountUnitsNull	= CG_Null
  	   ENUMERATOR :: SubstanceAmountUnitsUserDefined= CG_UserDefined
  	   ENUMERATOR :: Mole				= 2
  	   ENUMERATOR :: Entities			= 3
  	   ENUMERATOR :: StandardCubicFoot   		= 4
  	   ENUMERATOR :: StandardCubicMeter		= 5
	END ENUM
#else
        integer@CGFSIZET@ Mole, Entities, StandardCubicFoot
	integer@CGFSIZET@  StandardCubicMeter
        parameter (Mole               = 2)
        parameter (Entities           = 3)
        parameter (StandardCubicFoot  = 4)
        parameter (StandardCubicMeter = 5)
#endif
        CHARACTER*32 LuminousIntensityUnitsName(0:6)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
  	   ENUMERATOR :: LuminousIntensityUnitsNull	  = CG_Null
  	   ENUMERATOR ::LuminousIntensityUnitsUserDefined=CG_UserDefined
  	   ENUMERATOR :: Candela			  = 2
  	   ENUMERATOR :: Candle 			  = 3
  	   ENUMERATOR :: Carcel				  = 4
  	   ENUMERATOR :: Hefner				  = 5
  	   ENUMERATOR :: Violle				  = 6
	END ENUM
#else
        integer@CGFSIZET@ Candela, Candle, Carcel, Hefner, Violle
        parameter (Candela = 2)
        parameter (Candle  = 3)
        parameter (Carcel  = 4)
        parameter (Hefner  = 5)
        parameter (Violle  = 6)
#endif

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Data Class (found in cgnslib.h                                 *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        CHARACTER*32 DataClassName(0:6)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
     	   ENUMERATOR :: DataClassNull			= CG_Null
     	   ENUMERATOR :: DataClassUserDefined		= CG_UserDefined
     	   ENUMERATOR :: Dimensional 			= 2
     	   ENUMERATOR :: NormalizedByDimensiona		= 3
     	   ENUMERATOR :: NormalizedByUnknownDimensional	= 4
     	   ENUMERATOR :: NondimensionalParameter	= 5
     	   ENUMERATOR :: DimensionlessConstant		= 6
	END ENUM
#else
        integer@CGFSIZET@ Dimensional, NormalizedByDimensional
        integer@CGFSIZET@ NormalizedByUnknownDimensional
        integer@CGFSIZET@ NondimensionalParameter, DimensionlessConstant
        parameter (Dimensional                    = 2)
        parameter (NormalizedByDimensional        = 3)
        parameter (NormalizedByUnknownDimensional = 4)
        parameter (NondimensionalParameter        = 5)
        parameter (DimensionlessConstant          = 6)
#endif

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Grid Location                                                  *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
        CHARACTER*32 GridLocationName(0:8)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
     	   ENUMERATOR :: GridLocationNull	= CG_Null
     	   ENUMERATOR :: GridLocationUserDefined= CG_UserDefined
     	   ENUMERATOR :: Vertex 		= 2
     	   ENUMERATOR :: CellCenter		= 3
     	   ENUMERATOR :: FaceCenter		= 4
     	   ENUMERATOR :: IFaceCenter		= 5
     	   ENUMERATOR :: JFaceCenter		= 6
     	   ENUMERATOR :: KFaceCenter		= 7
     	   ENUMERATOR :: EdgeCenter		= 8
	END ENUM
#else
        integer@CGFSIZET@ Vertex, CellCenter, FaceCenter
        integer@CGFSIZET@ IFaceCenter, JFaceCenter
	integer@CGFSIZET@ KFaceCenter, EdgeCenter
        parameter (Vertex      = 2)
        parameter (CellCenter  = 3)
        parameter (FaceCenter  = 4)
        parameter (IFaceCenter = 5)
        parameter (JFaceCenter = 6)
        parameter (KFaceCenter = 7)
        parameter (EdgeCenter  = 8)
#endif

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Grid Connectivity Types                                        *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
        CHARACTER*32 GridConnectivityTypeName(0:4)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
  	   ENUMERATOR :: GridConnectivityTypeNul	= CG_Null
  	   ENUMERATOR :: GridConnectivityTypeUserDefined= CG_UserDefined
     	   ENUMERATOR :: Overset 			= 2
     	   ENUMERATOR :: Abutting 			= 3
     	   ENUMERATOR :: Abutting1to1 			= 4
	END ENUM
#else
        integer@CGFSIZET@ Overset, Abutting, Abutting1to1
        parameter (Overset      = 2)
        parameter (Abutting     = 3)
        parameter (Abutting1to1 = 4)
#endif

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Point Set Types                                                *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
        CHARACTER*32 PointSetTypeName(0:8)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
     	   ENUMERATOR :: PointSetTypeNull 	= CG_Null
     	   ENUMERATOR :: PointSetTypeUserDefined= CG_UserDefined
     	   ENUMERATOR :: PointList 		= 2
     	   ENUMERATOR :: PointListDonor 	= 3
     	   ENUMERATOR :: PointRange 		= 4
     	   ENUMERATOR :: PointRangeDonor 	= 5
     	   ENUMERATOR :: ElementRange 		= 6
     	   ENUMERATOR :: ElementList 		= 7
     	   ENUMERATOR :: CellListDonor 		= 8
	END ENUM
#else
        integer@CGFSIZET@ PointList, PointListDonor
        integer@CGFSIZET@ PointRange, PointRangeDonor
        integer@CGFSIZET@ ElementRange, ElementList, CellListDonor
        parameter (PointList       = 2)
        parameter (PointListDonor  = 3)
        parameter (PointRange      = 4)
        parameter (PointRangeDonor = 5)
        parameter (ElementRange    = 6)
        parameter (ElementList     = 7)
        parameter (CellListDonor   = 8)
#endif

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Governing Equations and Physical Models Types                  *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
        CHARACTER*32 GoverningEquationsTypeName(0:7)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
     	   ENUMERATOR :: GoverningEquationsNull		= CG_Null
     	   ENUMERATOR :: GoverningEquationsUserDefined 	= CG_UserDefined
     	   ENUMERATOR :: FullPotential 			= 2
     	   ENUMERATOR :: Euler 				= 3
     	   ENUMERATOR :: NSLaminar 			= 4
     	   ENUMERATOR :: NSTurbulent 			= 5
     	   ENUMERATOR :: NSLaminarIncompressible 	= 6
     	   ENUMERATOR :: NSTurbulentIncompressible 	= 7
	END ENUM
#else
        integer@CGFSIZET@ FullPotential, Euler
        integer@CGFSIZET@ NSLaminar, NSTurbulent
        integer@CGFSIZET@ NSLaminarIncompressible
        integer@CGFSIZET@ NSTurbulentIncompressible
        parameter (FullPotential             = 2)
        parameter (Euler                     = 3)
        parameter (NSLaminar                 = 4)
        parameter (NSTurbulent               = 5)
        parameter (NSLaminarIncompressible   = 6)
        parameter (NSTurbulentIncompressible = 7)
#endif

!** Any model type will accept both ModelTypeNull and ModelTypeUserDefined.
!** The following models will accept these values as vaild...
!**
!** GasModel_t: Ideal, VanderWaals, CaloricallyPerfect, ThermallyPerfect,
!**    ConstantDensity, RedlichKwong
!**
!** ViscosityModel_t: Constant, PowerLaw, SutherlandLaw
!**
!** ThermalConductivityModel_t: PowerLaw, SutherlandLaw, ConstantPrandtl
!**
!** TurbulenceModel_t: Algebraic_BaldwinLomax, Algebraic_CebeciSmith,
!**    HalfEquation_JohnsonKing, OneEquation_BaldwinBarth,
!**    OneEquation_SpalartAllmaras, TwoEquation_JonesLaunder,
!**    TwoEquation_MenterSST,TwoEquation_Wilcox
!**
!** TurbulenceClosure_t: EddyViscosity, ReynoldsStress,
!**    ReynoldsStressAlgebraic
!**
!** ThermalRelaxationModel_t: Frozen, ThermalEquilib, ThermalNonequilib
!**
!** ChemicalKineticsModel_t: Frozen, ChemicalEquilibCurveFit,
!**    ChemicalEquilibMinimization, ChemicalNonequilib
!**
!** EMElectricFieldModel_t: Voltage, Interpolated, Constant, Frozen
!**
!** EMMagneticFieldModel_t: Interpolated, Constant, Frozen
!**
!** EMConductivityModel_t: Constant, Frozen, Equilibrium_LinRessler,
!**                             Chemistry_LinRessler

        CHARACTER*32 ModelTypeName(0:35)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
  	   ENUMERATOR :: ModelTypeNull 			= CG_Null
  	   ENUMERATOR :: ModelTypeUserDefined 		= CG_UserDefined
  	   ENUMERATOR :: Ideal 				= 2
  	   ENUMERATOR :: VanderWaals 			= 3
   	   ENUMERATOR :: Constant 			= 4
  	   ENUMERATOR :: PowerLaw 			= 5
  	   ENUMERATOR :: SutherlandLaw 			= 6
  	   ENUMERATOR :: ConstantPrandtl 		= 7
  	   ENUMERATOR :: EddyViscosity			= 8
  	   ENUMERATOR :: ReynoldsStress 		= 9
  	   ENUMERATOR :: ReynoldsStressAlgebraic 	= 10
  	   ENUMERATOR :: Algebraic_BaldwinLomax 	= 11
  	   ENUMERATOR :: Algebraic_CebeciSmith 		= 12
   	   ENUMERATOR :: HalfEquation_JohnsonKing 	= 13
  	   ENUMERATOR :: OneEquation_BaldwinBarth 	= 14
  	   ENUMERATOR :: OneEquation_SpalartAllmaras 	= 15
  	   ENUMERATOR :: TwoEquation_JonesLaunder 	= 16
  	   ENUMERATOR :: TwoEquation_MenterSST 		= 17
  	   ENUMERATOR :: TwoEquation_Wilcox 		= 18
  	   ENUMERATOR :: CaloricallyPerfect 		= 19
  	   ENUMERATOR :: ThermallyPerfect 		= 20
  	   ENUMERATOR :: ConstantDensity 		= 21
  	   ENUMERATOR :: RedlichKwong 			= 22
  	   ENUMERATOR :: Frozen 			= 23
  	   ENUMERATOR :: ThermalEquilib 		= 24
  	   ENUMERATOR :: ThermalNonequilib 		= 25
  	   ENUMERATOR :: ChemicalEquilibCurveFit 	= 26
  	   ENUMERATOR :: ChemicalEquilibMinimization 	= 27
  	   ENUMERATOR :: ChemicalNonequilib 		= 28
  	   ENUMERATOR :: EMElectricField 		= 29
  	   ENUMERATOR :: EMMagneticField 		= 30
  	   ENUMERATOR :: EMConductivity 		= 31
  	   ENUMERATOR :: Voltage 			= 32
  	   ENUMERATOR :: Interpolated 			= 33
  	   ENUMERATOR :: Equilibrium_LinRessler 	= 34
  	   ENUMERATOR :: Chemistry_LinRessler 		= 35
	END ENUM
#else
        integer@CGFSIZET@ Ideal, VanderWaals
        integer@CGFSIZET@ Constant
        integer@CGFSIZET@ PowerLaw, SutherlandLaw
        integer@CGFSIZET@ ConstantPrandtl
        integer@CGFSIZET@ EddyViscosity, ReynoldsStress
        integer@CGFSIZET@ ReynoldsStressAlgebraic
        integer@CGFSIZET@ Algebraic_BaldwinLomax, Algebraic_CebeciSmith
        integer@CGFSIZET@ HalfEquation_JohnsonKing
	integer@CGFSIZET@ OneEquation_BaldwinBarth
        integer@CGFSIZET@ OneEquation_SpalartAllmaras
        integer@CGFSIZET@ TwoEquation_JonesLaunder
        integer@CGFSIZET@ TwoEquation_MenterSST, TwoEquation_Wilcox
        integer@CGFSIZET@ CaloricallyPerfect, ThermallyPerfect
        integer@CGFSIZET@ ConstantDensity, RedlichKwong
        integer@CGFSIZET@ Frozen, ThermalEquilib, ThermalNonequilib
        integer@CGFSIZET@ ChemicalEquilibCurveFit
        integer@CGFSIZET@ ChemicalEquilibMinimization
        integer@CGFSIZET@ ChemicalNonequilib
        integer@CGFSIZET@ EMElectricField, EMMagneticField, Voltage
        integer@CGFSIZET@ Interpolated
        integer@CGFSIZET@ EMConductivity, Equilibrium_LinRessler
        integer@CGFSIZET@ Chemistry_LinRessler

        parameter (Ideal                       = 2)
        parameter (VanderWaals                 = 3)
        parameter (Constant                    = 4)
        parameter (PowerLaw                    = 5)
        parameter (SutherlandLaw               = 6)
        parameter (ConstantPrandtl             = 7)
        parameter (EddyViscosity               = 8)
        parameter (ReynoldsStress              = 9)
        parameter (ReynoldsStressAlgebraic     = 10)
        parameter (Algebraic_BaldwinLomax      = 11)
        parameter (Algebraic_CebeciSmith       = 12)
        parameter (HalfEquation_JohnsonKing    = 13)
        parameter (OneEquation_BaldwinBarth    = 14)
        parameter (OneEquation_SpalartAllmaras = 15)
        parameter (TwoEquation_JonesLaunder    = 16)
        parameter (TwoEquation_MenterSST       = 17)
        parameter (TwoEquation_Wilcox          = 18)
        parameter (CaloricallyPerfect          = 19)
        parameter (ThermallyPerfect            = 20)
        parameter (ConstantDensity             = 21)
        parameter (RedlichKwong                = 22)
        parameter (Frozen                      = 23)
        parameter (ThermalEquilib              = 24)
        parameter (ThermalNonequilib           = 25)
        parameter (ChemicalEquilibCurveFit     = 26)
        parameter (ChemicalEquilibMinimization = 27)
        parameter (ChemicalNonequilib          = 28)
        parameter (EMElectricField             = 29)
        parameter (EMMagneticField             = 30)
        parameter (EMConductivity              = 31)
        parameter (Voltage                     = 32)
        parameter (Interpolated                = 33)
        parameter (Equilibrium_LinRessler      = 34)
        parameter (Chemistry_LinRessler        = 35)
#endif

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Boundary Condition Types                                       *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
        CHARACTER*32 BCTypeName(0:25)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
     	   ENUMERATOR :: BCTypeNull 		= CG_Null
     	   ENUMERATOR :: BCTypeUserDefined 	= CG_UserDefined
     	   ENUMERATOR :: BCAxisymmetricWedge 	= 2
     	   ENUMERATOR :: BCDegenerateLine 	= 3
    	   ENUMERATOR :: BCDegeneratePoint 	= 4
     	   ENUMERATOR :: BCDirichlet 		= 5
     	   ENUMERATOR :: BCExtrapolate 		= 6
     	   ENUMERATOR :: BCFarfield 		= 7
     	   ENUMERATOR :: BCGeneral 		= 8
     	   ENUMERATOR :: BCInflow 		= 9
     	   ENUMERATOR :: BCInflowSubsonic 	= 10
     	   ENUMERATOR :: BCInflowSupersonic 	= 11
     	   ENUMERATOR :: BCNeumann 		= 12
     	   ENUMERATOR :: BCOutflow 		= 13
     	   ENUMERATOR :: BCOutflowSubsonic 	= 14
     	   ENUMERATOR :: BCOutflowSupersonic 	= 15
     	   ENUMERATOR :: BCSymmetryPlane 	= 16
      	   ENUMERATOR :: BCSymmetryPolar 	= 17
     	   ENUMERATOR :: BCTunnelInflow 	= 18
     	   ENUMERATOR :: BCTunnelOutflow 	= 19
     	   ENUMERATOR :: BCWall 		= 20
     	   ENUMERATOR :: BCWallInviscid 	= 21
     	   ENUMERATOR :: BCWallViscous 		= 22
     	   ENUMERATOR :: BCWallViscousHeatFlux 	= 23
     	   ENUMERATOR :: BCWallViscousIsothermal= 24
     	   ENUMERATOR :: FamilySpecified 	= 25
	END ENUM
#else
        integer@CGFSIZET@ BCAxisymmetricWedge, BCDegenerateLine
        integer@CGFSIZET@ BCDegeneratePoint
        integer@CGFSIZET@ BCDirichlet,BCExtrapolate,BCFarfield,BCGeneral
        integer@CGFSIZET@ BCInflow, BCInflowSubsonic,BCInflowSupersonic
        integer@CGFSIZET@ BCNeumann
        integer@CGFSIZET@ BCOutflow,BCOutflowSubsonic
	integer@CGFSIZET@ BCOutflowSupersonic
        integer@CGFSIZET@ BCSymmetryPlane, BCSymmetryPolar
        integer@CGFSIZET@ BCTunnelInflow, BCTunnelOutflow
        integer@CGFSIZET@ BCWall, BCWallInviscid, BCWallViscous
        integer@CGFSIZET@ BCWallViscousHeatFlux, BCWallViscousIsothermal
        integer@CGFSIZET@ FamilySpecified
        parameter (BCAxisymmetricWedge     = 2)
        parameter (BCDegenerateLine        = 3)
        parameter (BCDegeneratePoint       = 4)
        parameter (BCDirichlet             = 5)
        parameter (BCExtrapolate           = 6)
        parameter (BCFarfield              = 7)
        parameter (BCGeneral               = 8)
        parameter (BCInflow                = 9)
        parameter (BCInflowSubsonic        = 10)
        parameter (BCInflowSupersonic      = 11)
        parameter (BCNeumann               = 12)
        parameter (BCOutflow               = 13)
        parameter (BCOutflowSubsonic       = 14)
        parameter (BCOutflowSupersonic     = 15)
        parameter (BCSymmetryPlane         = 16)
        parameter (BCSymmetryPolar         = 17)
        parameter (BCTunnelInflow          = 18)
        parameter (BCTunnelOutflow         = 19)
        parameter (BCWall                  = 20)
        parameter (BCWallInviscid          = 21)
        parameter (BCWallViscous           = 22)
        parameter (BCWallViscousHeatFlux   = 23)
        parameter (BCWallViscousIsothermal = 24)
        parameter (FamilySpecified         = 25)
#endif

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Data types                                                     *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
        CHARACTER*32 DataTypeName(0:6)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
	   ENUMERATOR :: DataTypeNull,DataTypeUserDefined
           ENUMERATOR :: Integer,RealSingle
	   ENUMERATOR :: RealDouble,Character,LongInteger
        END ENUM
#else
        integer@CGFSIZET@ Integer, RealSingle, RealDouble, Character
        integer@CGFSIZET@ LongInteger
        parameter (Integer     = 2)
        parameter (RealSingle  = 3)
        parameter (RealDouble  = 4)
        parameter (Character   = 5)
        parameter (LongInteger = 6)
#endif

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      BCData_t types                                                 *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
        CHARACTER*32 BCDataTypeName(0:3)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
  	   ENUMERATOR :: BCDataTypeNull       	= CG_Null
  	   ENUMERATOR :: BCDataTypeUserDefined	= CG_UserDefined
  	   ENUMERATOR :: Dirichlet		= 2
  	   ENUMERATOR :: Neumann		= 3
	END ENUM
#else
        integer@CGFSIZET@ Dirichlet, Neumann
        parameter (Dirichlet = 2)
        parameter (Neumann   = 3)
#endif

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Element types                                                  *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        CHARACTER*32 ElementTypeName(0:39)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
	   ENUMERATOR :: ElementTypeNull, ElementTypeUserDefined ! 0, 1,
	   ENUMERATOR :: NODE, BAR_2, BAR_3                      ! 2, 3, 4,
	   ENUMERATOR :: TRI_3, TRI_6                            ! 5, 6,
	   ENUMERATOR :: QUAD_4, QUAD_8, QUAD_9                  ! 7, 8, 9,
	   ENUMERATOR :: TETRA_4, TETRA_10                       ! 10, 11,
	   ENUMERATOR :: PYRA_5, PYRA_14                         ! 12, 13,
	   ENUMERATOR :: PENTA_6, PENTA_15, PENTA_18             ! 14, 15, 16,
	   ENUMERATOR :: HEXA_8, HEXA_20, HEXA_27                ! 17, 18, 19,
	   ENUMERATOR :: MIXED, PYRA_13, NGON_n, NFACE_n         ! 20, 21, 22, 23
        END ENUM
#else
        integer@CGFSIZET@ NODE, BAR_2, BAR_3, TRI_3, TRI_6
        integer@CGFSIZET@ QUAD_4, QUAD_8, QUAD_9
        integer@CGFSIZET@ TETRA_4, TETRA_10, PYRA_5, PYRA_14
        integer@CGFSIZET@ PENTA_6, PENTA_15, PENTA_18
        integer@CGFSIZET@ HEXA_8, HEXA_20, HEXA_27
        integer@CGFSIZET@ MIXED, PYRA_13, NGON_n, NFACE_n
        integer@CGFSIZET@ BAR_4, TRI_9, TRI_10
        integer@CGFSIZET@ QUAD_12, QUAD_16
        integer@CGFSIZET@ TETRA_16, TETRA_20
        integer@CGFSIZET@ PYRA_21, PYRA_29, PYRA_30
        integer@CGFSIZET@ PENTA_24, PENTA_38, PENTA_40
        integer@CGFSIZET@ HEXA_32, HEXA_56, HEXA_64
        parameter (NODE     =  2)
        parameter (BAR_2    =  3)
        parameter (BAR_3    =  4)
        parameter (TRI_3    =  5)
        parameter (TRI_6    =  6)
        parameter (QUAD_4   =  7)
        parameter (QUAD_8   =  8)
        parameter (QUAD_9   =  9)
        parameter (TETRA_4  = 10)
        parameter (TETRA_10 = 11)
        parameter (PYRA_5   = 12)
        parameter (PYRA_14  = 13)
        parameter (PENTA_6  = 14)
        parameter (PENTA_15 = 15)
        parameter (PENTA_18 = 16)
        parameter (HEXA_8   = 17)
        parameter (HEXA_20  = 18)
        parameter (HEXA_27  = 19)
        parameter (MIXED    = 20)
        parameter (PYRA_13  = 21)
        parameter (NGON_n   = 22)
        parameter (NFACE_n  = 23)
        parameter (BAR_4    = 24)
        parameter (TRI_9    = 25)
        parameter (TRI_10   = 26)
        parameter (QUAD_12  = 27)
        parameter (QUAD_16  = 28)
        parameter (TETRA_16 = 29)
        parameter (TETRA_20 = 30)
        parameter (PYRA_21  = 31)
        parameter (PYRA_29  = 32)
        parameter (PYRA_30  = 33)
        parameter (PENTA_24 = 34)
        parameter (PENTA_38 = 35)
        parameter (PENTA_40 = 36)
        parameter (HEXA_32  = 37)
        parameter (HEXA_56  = 38)
        parameter (HEXA_64  = 39)
#endif

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Zone types                                                     *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
        
        CHARACTER*32 ZoneTypeName(0:3)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
	   ENUMERATOR :: ZoneTypeNull, ZoneTypeUserDefined
           ENUMERATOR :: Structured, Unstructured
        END ENUM
#else
        integer@CGFSIZET@ Structured, Unstructured
        parameter (Structured   =  2)
        parameter (Unstructured =  3)
#endif



!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Rigid Grid Motion types                                        *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
        CHARACTER*32 RigidGridMotionTypeName(0:3)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
	   ENUMERATOR :: RigidGridMotionTypeNull
	   ENUMERATOR :: RigidGridMotionTypeUserDefined
	   ENUMERATOR :: ConstantRate, VariableRate
	END ENUM
#else
        integer@CGFSIZET@ ConstantRate, VariableRate
        parameter (ConstantRate = 2)
        parameter (VariableRate = 3)
#endif

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Arbitrary Grid Motion types                                    *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
        CHARACTER*32 ArbitraryGridMotionTypeName(0:3)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
	   ENUMERATOR :: ArbitraryGridMotionTypeNull
           ENUMERATOR :: ArbitraryGridMotionTypeUserDefined
           ENUMERATOR :: NonDeformingGrid, DeformingGrid
	END ENUM 
#else
        integer@CGFSIZET@ NonDeformingGrid, DeformingGrid
        parameter (NonDeformingGrid = 2)
        parameter (DeformingGrid = 3)
#endif

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Simulation type                                                *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
        CHARACTER*32 SimulationTypeName(0:3)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
	   ENUMERATOR :: SimulationTypeNull, SimulationTypeUserDefined
	   ENUMERATOR :: TimeAccurate, NonTimeAccurate
        END ENUM
#else
        integer@CGFSIZET@ TimeAccurate, NonTimeAccurate
        parameter (TimeAccurate = 2)
        parameter (NonTimeAccurate = 3)
#endif

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      BC Property types                                              *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        CHARACTER*32 WallFunctionTypeName(0:2)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
	   ENUMERATOR:: WallFunctionTypeNull,WallFunctionTypeUserDefined
	   ENUMERATOR:: Generic
        END ENUM
#else
        integer@CGFSIZET@ Generic
        parameter (Generic = 2)
#endif

        CHARACTER*32 AreaTypeName(0:3)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
	   ENUMERATOR :: AreaTypeNull, AreaTypeUserDefined
	   ENUMERATOR :: BleedArea, CaptureArea
        END ENUM
#else
        integer@CGFSIZET@ BleedArea, CaptureArea
        parameter (BleedArea = 2)
        parameter (CaptureArea = 3)
#endif

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Grid Connectivity Property types                               *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        CHARACTER*32 AverageInterfaceTypeName(0:7)
#if HAVE_FORTRAN_2003
        ENUM, BIND(C)
	   ENUMERATOR :: AverageInterfaceTypeNull
	   ENUMERATOR :: AverageInterfaceTypeUserDefined
	   ENUMERATOR :: AverageAll, AverageCircumferential
           ENUMERATOR :: AverageRadial, AverageI
	   ENUMERATOR :: AverageJ, AverageK
        END ENUM 
#else
        integer@CGFSIZET@ AverageAll, AverageCircumferential
        integer@CGFSIZET@ AverageRadial, AverageI, AverageJ, AverageK
        parameter (AverageAll = 2)
        parameter (AverageCircumferential = 3)
        parameter (AverageRadial = 4)
        parameter (AverageI = 5)
        parameter (AverageJ = 6)
        parameter (AverageK = 7)
#endif

! For portability to Linux Absoft, all data statements were moved after the
! variables and parametres declarations

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Dimensional Units                                              *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
        data MassUnitsName /'Null','UserDefined','Kilogram','Gram',     &
     &                      'Slug','PoundMass'/
        data LengthUnitsName / 'Null', 'UserDefined',                   &
     &         'Meter','Centimeter','Millimeter','Foot','Inch'/

        data TimeUnitsName /'Null','UserDefined','Second'/

        data TemperatureUnitsName /'Null','UserDefined',                &
     &         'Kelvin','Celsius','Rankine','Fahrenheit'/

        data AngleUnitsName /'Null','UserDefined','Degree','Radian'/

        data ElectricCurrentUnitsName /'Null', 'UserDefined', 'Ampere', &
     &         'Abampere', 'Statampere', 'Edison', 'a.u.'/

        data SubstanceAmountUnitsName /'Null', 'UserDefined', 'Mole',   &
     &         'Entities', 'StandardCubicFoot', 'StandardCubicMeter'/

        data LuminousIntensityUnitsName /'Null', 'UserDefined',         &
     &         'Candela', 'Candle', 'Carcel', 'Hefner', 'Violle'/

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Data Class                                                     *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
        data DataClassName / 'Null','UserDefined',                      &
     &          'Dimensional','NormalizedByDimensional',                &
     &          'NormalizedByUnknownDimensional',                       &
     &          'NondimensionalParameter','DimensionlessConstant'/

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Grid Location                                                  *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        data GridLocationName / 'Null','UserDefined',                   &
     &          'Vertex','CellCenter','FaceCenter','IFaceCenter',       &
     &          'JFaceCenter','KFaceCenter','EdgeCenter' /

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Grid Connectivity Types                                        *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        data GridConnectivityTypeName / 'Null','UserDefined',           &
     &          'Overset','Abutting','Abutting1to1'/

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Point Set Types                                                *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        data PointSetTypeName / 'Null','UserDefined',                   &
     &          'PointList','PointListDonor',                           &
     &          'PointRange','PointRangeDonor',                         &
     &          'ElementRange','ElementList','CellListDonor'/

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Governing Equations and Physical Models Types                  *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        data GoverningEquationsTypeName / 'Null','UserDefined',         &
     &          'FullPotential','Euler', 'NSLaminar', 'NSTurbulent',    &
     &          'NSLaminarIncompressible', 'NSTurbulentIncompressible'/

        data ModelTypeName / 'Null','UserDefined',                      &
     &        'Ideal','VanderWaals', 'Constant','PowerLaw',             &
     &        'SutherlandLaw','ConstantPrandtl','EddyViscosity',        &
     &        'ReynoldsStress','ReynoldsStressAlgebraic',               &
     &        'Algebraic_BaldwinLomax','Algebraic_CebeciSmith',         &
     &        'HalfEquation_JohnsonKing','OneEquation_BaldwinBarth',    &
     &        'OneEquation_SpalartAllmaras','TwoEquation_JonesLaunder', &
     &        'TwoEquation_MenterSST','TwoEquation_Wilcox',             &
     &        'CaloricallyPerfect', 'ThermallyPerfect',                 &
     &        'ConstantDensity', 'RedlichKwong', 'Frozen',              &
     &        'ThermalEquilib', 'ThermalNonequilib',                    &
     &        'ChemicalEquilibCurveFit', 'ChemicalEquilibMinimization', &
     &        'ChemicalNonequilib', 'EMElectricField',                  &
     &        'EMMagneticField', 'EMConductivity', 'Voltage',           &
     &        'Interpolated', 'Equilibrium_LinRessler',                 &
     &        'Chemistry_LinRessler'/

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Boundary Condition Types                                       *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        data BCTypeName / 'Null','UserDefined',                         &
     &          'BCAxisymmetricWedge','BCDegenerateLine',               &
     &          'BCDegeneratePoint','BCDirichlet','BCExtrapolate',      &
     &          'BCFarfield','BCGeneral','BCInflow','BCInflowSubsonic', &
     &          'BCInflowSupersonic','BCNeumann','BCOutflow',           &
     &          'BCOutflowSubsonic','BCOutflowSupersonic',              &
     &          'BCSymmetryPlane','BCSymmetryPolar','BCTunnelInflow',   &
     &          'BCTunnelOutflow','BCWall','BCWallInviscid',            &
     &          'BCWallViscous','BCWallViscousHeatFlux',                &
     &          'BCWallViscousIsothermal','FamilySpecified' /

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Data types                                                     *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        data DataTypeName / 'Null','UserDefined',                       &
     &          'Integer','RealSingle','RealDouble','Character',        &
     &          'LongInteger' /

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      BCData_t types                                                 *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        data BCDataTypeName / 'Null','UserDefined',                     &
     &          'Dirichlet', 'Neumann' /

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Element types                                                  *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        data ElementTypeName / 'Null','UserDefined',                    &
     &      'NODE', 'BAR_2', 'BAR_3', 'TRI_3', 'TRI_6',                 &
     &      'QUAD_4', 'QUAD_8', 'QUAD_9', 'TETRA_4', 'TETRA_10',        &
     &      'PYRA_5', 'PYRA_14', 'PENTA_6', 'PENTA_15',                 &
     &      'PENTA_18', 'HEXA_8', 'HEXA_20', 'HEXA_27', 'MIXED',        &
     &      'PYRA_13', 'NGON_n', 'NFACE_n',                             &
     &      'BAR_4', 'TRI_9', 'TRI_10',                                 &
     &      'QUAD_12', 'QUAD_16',                                       &
     &      'TETRA_16', 'TETRA_20',                                     &
     &      'PYRA_21', 'PYRA_29', 'PYRA_30',                            &
     &      'PENTA_24', 'PENTA_38', 'PENTA_40',                         &
     &      'HEXA_32', 'HEXA_56', 'HEXA_64' /

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Zone types                                                     *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        data ZoneTypeName / 'Null','UserDefined',                       &
     &      'Structured', 'Unstructured' /

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Rigid Grid Motion types                                        *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        data RigidGridMotionTypeName / 'Null','UserDefined',            &
     &       'ConstantRate', 'VariableRate' /

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Arbitrary Grid Motion types                                    *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        data ArbitraryGridMotionTypeName / 'Null','UserDefined',        &
     &       'NonDeformingGrid', 'DeformingGrid' /

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Simulation type                                                *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        data SimulationTypeName / 'Null','UserDefined',                 &
     &       'TimeAccurate', 'NonTimeAccurate' /

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      BC Property types                                              *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        data WallFunctionTypeName / 'Null','UserDefined',               &
     &       'Generic' /

        data AreaTypeName / 'Null','UserDefined',                       &
     &       'BleedArea', 'CaptureArea' /

!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
!*      Grid Connectivity Property types                               *
!* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

        data AverageInterfaceTypeName / 'Null','UserDefined',           &
     &       'AverageAll', 'AverageCircumferential', 'AverageRadial',   &
     &       'AverageI', 'AverageJ', 'AverageK' /
#endif
